{"version":3,"sources":["components/Settings/Settings.module.scss","components/Display/Display.module.scss","components/Counter/Counter.module.scss","components/Button/Button.module.scss","App.module.scss","components/Input/Input.module.scss","fonts/static/Orbitron-Regular.ttf","serviceWorker.ts","redux/counter-reducer.ts","redux/store.ts","redux/selector.ts","components/Display/Display.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","components/Input/Input.tsx","components/Settings/Settings.tsx","localStorage/localStorage.ts","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","ACTIONS_TYPE","changeMaxValueAC","value","type","CHANGE_MAX_VALUE","changeStartValueAC","CHANGE_START_VALUE","setCounterValueAC","SET_COUNTER_VALUE","initialState","max","start","counter","isError","isCounterAction","isSetButtonDisabled","rootReducer","combineReducers","state","action","store","createStore","selectMax","selectStart","selectIsError","selectCounter","selectIsCounterAction","selectIsSetButtonDisabled","Display","React","memo","useSelector","numberValueStyle","s","number","maxValueStyle","maximum","textStyle","text","errorStyle","error_text","className","display","Button","buttonName","callback","disabled","btn","onClick","Counter","useState","maxCount","setMaxCount","dispatch","useDispatch","increaseValue","useCallback","resetValue","containerMaxStyle","container","buttons","Input","step","changeValue","datatype","inputItem","onChange","e","Settings","changeInputValue","data","currentTarget","setValue","key","stateAsString","JSON","stringify","localStorage","setItem","saveState","errorStyleMax","inputError","errorStyleStart","wrapperContainer","inputsBlock","inputRow","title","App","useEffect","getItem","parse","getState","mainContent","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.04b2d714.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperContainer\":\"Settings_wrapperContainer__3192j\",\"container\":\"Settings_container__MfBoZ\",\"inputsBlock\":\"Settings_inputsBlock__3Vz3X\",\"inputRow\":\"Settings_inputRow__3SihM\",\"title\":\"Settings_title__Gm-Md\",\"inputError\":\"Settings_inputError__3JDWr\",\"buttons\":\"Settings_buttons__3Tflh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__2AA-q\",\"number\":\"Display_number__2hzKn\",\"maximum\":\"Display_maximum__3mphW\",\"text\":\"Display_text__3kKRY\",\"error_text\":\"Display_error_text__14Djs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Counter_container__Uwlto\",\"buttons\":\"Counter_buttons__2X6S9\",\"max\":\"Counter_max__17sPO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__2OAaX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"App_mainContent__iChyL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputItem\":\"Input_inputItem__3wgY2\"};","module.exports = __webpack_public_path__ + \"static/media/Orbitron-Regular.add0c424.ttf\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ACTIONS_TYPE {\r\n  CHANGE_MAX_VALUE = 'Counter/CHANGE_MAX_INPUT',\r\n  CHANGE_START_VALUE = 'Counter/CHANGE_START_INPUT',\r\n  SET_COUNTER_VALUE = 'Counter/SET_COUNTER_VALUE',\r\n}\r\n\r\nexport const changeMaxValueAC = (value: number) => ({\r\n  type: ACTIONS_TYPE.CHANGE_MAX_VALUE, value\r\n} as const);\r\nexport const changeStartValueAC = (value: number) => ({\r\n  type: ACTIONS_TYPE.CHANGE_START_VALUE, value\r\n} as const);\r\nexport const setCounterValueAC = (value: number) => ({\r\n  type: ACTIONS_TYPE.SET_COUNTER_VALUE, value\r\n} as const);\r\n\r\n\r\nexport type ActionsType = ReturnType<typeof changeMaxValueAC>\r\n  | ReturnType<typeof changeStartValueAC>\r\n  | ReturnType<typeof setCounterValueAC>\r\n\r\nexport type InputStateType = {\r\n  max: number\r\n  start: number\r\n}\r\nexport type CounterStateType = InputStateType & {\r\n  counter: number\r\n  isError: boolean\r\n  isCounterAction: boolean\r\n  isSetButtonDisabled: boolean\r\n}\r\nconst initialState: CounterStateType = {\r\n  max: 0,\r\n  start: 0,\r\n  counter: 0,\r\n  isError: false,\r\n  isCounterAction: false,\r\n  isSetButtonDisabled: true,\r\n}\r\n\r\n\r\nexport const counterReducer = (state: CounterStateType = initialState, action: ActionsType): CounterStateType => {\r\n  switch (action.type) {\r\n    case ACTIONS_TYPE.CHANGE_MAX_VALUE:\r\n      return (action.value < 0 || action.value <= state.start || state.start < 0)\r\n        ? {\r\n          ...state,\r\n          max: action.value,\r\n          isError: true,\r\n          isCounterAction: false,\r\n          isSetButtonDisabled: true\r\n        }\r\n        : {\r\n          ...state,\r\n          max: action.value,\r\n          isError: false,\r\n          isCounterAction: true,\r\n          isSetButtonDisabled: false\r\n        }\r\n    case ACTIONS_TYPE.CHANGE_START_VALUE:\r\n      return (action.value < 0 || action.value >= state.max || state.max < 0)\r\n        ? {\r\n          ...state,\r\n          start: action.value,\r\n          isError: true,\r\n          isCounterAction: false,\r\n          isSetButtonDisabled: true\r\n        }\r\n        : {\r\n          ...state,\r\n          start: action.value,\r\n          isError: false,\r\n          isCounterAction: true,\r\n          isSetButtonDisabled: false\r\n        }\r\n    case ACTIONS_TYPE.SET_COUNTER_VALUE:\r\n      return {\r\n        ...state,\r\n        counter: action.value,\r\n        isError: false,\r\n        isCounterAction: false,\r\n        isSetButtonDisabled: true\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import {combineReducers, createStore} from 'redux';\r\nimport {counterReducer} from './counter-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  counter: counterReducer\r\n})\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import {AppStateType} from './store';\r\n\r\nexport const selectMax = (state: AppStateType) => state.counter.max;\r\nexport const selectStart = (state: AppStateType) => state.counter.start;\r\nexport const selectIsError = (state: AppStateType) => state.counter.isError;\r\nexport const selectCounter = (state: AppStateType) => state.counter.counter;\r\nexport const selectIsCounterAction = (state: AppStateType) => state.counter.isCounterAction;\r\nexport const selectIsSetButtonDisabled = (state: AppStateType) => state.counter.isSetButtonDisabled;\r\n","import React from 'react';\r\nimport s from './Display.module.scss';\r\nimport {useSelector} from 'react-redux';\r\nimport {selectCounter, selectIsCounterAction, selectIsError, selectMax} from '../../redux/selector';\r\n\r\n\r\nconst Display:React.FC = React.memo(() => {\r\n  const max = useSelector(selectMax);\r\n  const counter = useSelector(selectCounter);\r\n  const isError = useSelector(selectIsError);\r\n  const isCounterAction = useSelector((selectIsCounterAction))\r\n\r\n  const counterErrorText = `Incorrect value!`;\r\n  const counterActionText = `Enter values and press \"set\"`;\r\n\r\n  let numberValueStyle = counter ? `${s.number}` : '';\r\n  let maxValueStyle = counter === max ? `${s.maximum}` : '';\r\n  let textStyle = isCounterAction ? `${s.text}` : ''\r\n  let errorStyle = isError ? `${s.error_text}` : ''\r\n\r\n  return (\r\n    <div className={`${s.display} ${numberValueStyle} ${textStyle} ${errorStyle} ${maxValueStyle}`}>\r\n      {(isError && counterErrorText) || (isCounterAction && counterActionText) || counter}\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default Display;","import React from 'react';\r\nimport s from './Button.module.scss';\r\n\r\nexport type ButtonPropsType = {\r\n  buttonName: string\r\n  callback: () => void\r\n  disabled?: boolean\r\n}\r\nconst Button: React.FC<ButtonPropsType> = React.memo(({buttonName, callback, disabled}) => {\r\n  return <>\r\n    <button className={s.btn} onClick={callback} disabled={disabled}>\r\n      {buttonName}\r\n    </button>\r\n  </>\r\n})\r\nexport default Button;","import React, {useCallback, useState} from 'react';\r\nimport Display from '../Display/Display';\r\nimport Button from '../Button/Button';\r\nimport s from './Counter.module.scss'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {selectCounter, selectIsCounterAction, selectIsError, selectMax, selectStart} from '../../redux/selector';\r\nimport {setCounterValueAC} from '../../redux/counter-reducer';\r\n\r\nconst Counter:React.FC = React.memo(() => {\r\n  const[maxCount, setMaxCount] = useState(false);\r\n  const dispatch = useDispatch();\r\n  const max = useSelector(selectMax);\r\n  const start = useSelector(selectStart);\r\n  const counter = useSelector(selectCounter);\r\n  const isError = useSelector(selectIsError);\r\n  const isCounterAction = useSelector((selectIsCounterAction))\r\n\r\n  const increaseValue = useCallback(() => {\r\n      dispatch(setCounterValueAC(counter + 1));\r\n      if (counter + 1 === max) {\r\n        setMaxCount(true)\r\n      }\r\n  }, [counter, dispatch])\r\n  const resetValue = useCallback(() => {\r\n    dispatch(setCounterValueAC(start));\r\n    setMaxCount(false)\r\n  }, [start, dispatch])\r\n  const containerMaxStyle = maxCount ? s.max : ''\r\n\r\n  return <div className={`${s.container} ${containerMaxStyle}`}>\r\n    <Display />\r\n    <div className={s.buttons}>\r\n      <Button buttonName='inc'\r\n              callback={increaseValue}\r\n              disabled={isError || isCounterAction || counter === max}/>\r\n      <Button buttonName='reset'\r\n              callback={resetValue}\r\n              disabled={isError || isCounterAction}/>\r\n    </div>\r\n  </div>\r\n})\r\n\r\n\r\nexport default Counter;","import React, {ChangeEvent} from 'react';\r\nimport s from './Input.module.scss'\r\n\r\n\r\ntype InputPropsType = {\r\n  className: string\r\n  value: number\r\n  step: number\r\n  changeValue: (e: ChangeEvent<HTMLInputElement>, data: string) => void\r\n  datatype: string\r\n}\r\n\r\nconst Input: React.FC<InputPropsType> = ({\r\n                                           className, value, step,\r\n                                           changeValue, datatype\r\n                                         }) => {\r\n  return <>\r\n    <input className={`${s.inputItem} ${className}`}\r\n           type=\"number\"\r\n           value={value}\r\n           step={step}\r\n           onChange={(e) => changeValue(e, datatype)}\r\n           datatype={datatype}/>\r\n  </>\r\n}\r\n\r\nexport default Input;","import React, {ChangeEvent, useCallback} from 'react';\r\nimport Button from '../Button/Button';\r\nimport s from './Settings.module.scss'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {selectIsSetButtonDisabled, selectMax, selectStart} from '../../redux/selector';\r\nimport {changeMaxValueAC, changeStartValueAC, setCounterValueAC} from '../../redux/counter-reducer';\r\nimport {saveState} from '../../localStorage/localStorage';\r\nimport Input from '../Input/Input';\r\n\r\n\r\nconst Settings: React.FC = React.memo(() => {\r\n  const dispatch = useDispatch();\r\n  const max = useSelector(selectMax);\r\n  const start = useSelector(selectStart);\r\n  const isSetButtonDisabled = useSelector(selectIsSetButtonDisabled);\r\n\r\n  const changeInputValue = useCallback((e: ChangeEvent<HTMLInputElement>, data: string) => {\r\n    const value = +e.currentTarget.value;\r\n    data === 'max'\r\n      ? dispatch(changeMaxValueAC(value))\r\n      : dispatch(changeStartValueAC(value))\r\n  }, [dispatch])\r\n\r\n  const setValue = useCallback(() => {\r\n    dispatch(setCounterValueAC(start));\r\n    saveState('inputValues', {max: max, start: start});\r\n  }, [max, start, dispatch])\r\n\r\n  let errorStyleMax = max < 0 || max <= start ? `${s.inputError}` : '';\r\n  let errorStyleStart = start < 0 || max <= start ? `${s.inputError}` : '';\r\n\r\n  return <div className={s.wrapperContainer}>\r\n    <div className={s.container}>\r\n      <div className={s.inputsBlock}>\r\n        <div className={s.inputRow}>\r\n          <span className={s.title}>Max:</span>\r\n          <Input className={errorStyleMax}\r\n                 value={max}\r\n                 step={1}\r\n                 changeValue={changeInputValue}\r\n                 datatype={'max'}/>\r\n        </div>\r\n        <div className={s.inputRow}>\r\n          <span className={s.title}>Start:</span>\r\n          <Input className={errorStyleStart}\r\n                 value={start}\r\n                 step={1}\r\n                 changeValue={changeInputValue}\r\n                 datatype={'start'}/>\r\n        </div>\r\n      </div>\r\n      <div className={s.buttons}>\r\n        <Button buttonName=\"set\"\r\n                callback={setValue}\r\n                disabled={isSetButtonDisabled}/>\r\n      </div>\r\n    </div>\r\n  </div>\r\n})\r\n\r\nexport default Settings;\r\n\r\n","// L O C A L    S T O R A G E\r\nimport {InputStateType} from '../redux/counter-reducer';\r\n\r\nexport function saveState(key: string, state: InputStateType) {\r\n  const stateAsString = JSON.stringify(state);\r\n  localStorage.setItem(key, stateAsString)\r\n}\r\n\r\nexport function getState (key: string) {\r\n  const stateAsString = localStorage.getItem(key);\r\n  if (stateAsString) {\r\n    return JSON.parse(stateAsString);\r\n  }\r\n}\r\n","import React, {useEffect} from 'react';\nimport Counter from './components/Counter/Counter';\nimport s from './App.module.scss';\nimport Settings from './components/Settings/Settings';\nimport {useDispatch} from 'react-redux';\nimport {changeMaxValueAC, changeStartValueAC, InputStateType, setCounterValueAC} from './redux/counter-reducer';\nimport {getState} from './localStorage/localStorage';\n\n\nconst App:React.FC = () => {\n  const dispatch = useDispatch();\n\n    useEffect(() => {\n    const state: InputStateType = getState('inputValues');\n    if (state) {\n      dispatch(changeMaxValueAC(state.max));\n      dispatch(changeStartValueAC(state.start));\n      dispatch(setCounterValueAC(state.start))\n    }\n  }, [dispatch])\n\n  return <div className={s.mainContent}>\n    <Settings/>\n    <Counter/>\n  </div>\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport './fonts/static/Orbitron-Regular.ttf'\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}